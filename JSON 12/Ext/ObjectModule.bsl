Перем КэшСсылокАналитик;
Перем КэшСсылокИзмерений;

#Область Выгрузка

//Функция Преобразования Записи в процессе JSON Сериализации
Функция ФункцияПреобразованияЗаписи(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Отказ = Истина;
    	Возврат Результат;
	КонецЕсли;
	
	ИмяТипа = XMLТипЗнч(Значение).ИмяТипа;
	
	Если Найти(ИмяТипа, "EnumRef") > 0 Тогда
		Результат = Строка(Значение); 
		Мапинг = КэшСсылокАналитик.Получить(ИмяТипа);
		Если Мапинг <> Неопределено Тогда
			Результат = Мапинг.Получить(Значение);
		КонецЕсли;
	ИначеЕсли Найти(ИмяТипа, "Ref") > 0 Тогда 
		Результат = Строка(Значение.УникальныйИдентификатор());		
	ИначеЕсли ИмяТипа = "AccountType" Тогда 
		Результат = Строка(Значение);		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
    Возврат Результат;
				
КонецФункции


Процедура ВыгрузитьДанные() Экспорт
	
	ПараметрыФала = ПолучитьПараметрыФала();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ДатаНачала", 	НачалоДня(ДатаНачала));
	ПараметрыЗапроса.Вставить("ДатаОкончания", 	КонецДня(ДатаОкончания));		
	
	МассивМетаданных = Новый Массив;
	СтруктураМетаданныхРегистраБухгалтерии = ПолучитьСтруктуруРегистраБухгалтерии(МассивМетаданных);
	
	Если СтруктураМетаданныхРегистраБухгалтерии <> Неопределено Тогда
				
		ПараметрыФала.Вставить("ПрефиксИмени", "operations");
				
		ОписаниеМетаданных = МассивМетаданных [МассивМетаданных.Количество()-1];
		
		ВыгрузитьОперации(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, ПараметрыЗапроса, ОписаниеМетаданных.Файлы);	
		ВыгрузитьСправочникОрганизации(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных);
		ВыгрузитьПланСчетов(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных);
		ВыгрузитьВидыАналитик(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных);
		ВыгрузитьКэшОбъектов(ПараметрыФала, МассивМетаданных, КэшСсылокАналитик, 	"Значения аналитики");
		ВыгрузитьКэшОбъектов(ПараметрыФала, МассивМетаданных, КэшСсылокИзмерений, 	"Значения измерений");
		
		//Выгрузка info.json
		ПараметрыФала.Вставить("ПрефиксИмени", "info");
		ВыгрузитьФайлОписанийМетаданных(ПараметрыФала, МассивМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ВыгрузитьКэшОбъектов(ПараметрыФала, МассивМетаданных, КэшСсылок, ВидМетаданных)
	
	СоответствиеТиповКМетаданным = ПолучитьСоответствиеТиповКМетаданным();	
	
	Для каждого КЗМассивСсылок Из КэшСсылок Цикл
		
		ПараметрыФала.ПрефиксИмени = ВидМетаданных + " " + КЗМассивСсылок.Ключ;
		
		ИмяМенеджераXML = Лев(КЗМассивСсылок.Ключ, Найти(КЗМассивСсылок.Ключ, ".")-1);
		ИмяОбъекта 		= СтрЗаменить(КЗМассивСсылок.Ключ, ИмяМенеджераXML + ".", "");
		
		СтруктураМенеджера = СоответствиеТиповКМетаданным.Получить(ИмяМенеджераXML);	
		
		Если ПустаяСтрока(СтруктураМенеджера) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			МетаданныеОбъекта = Метаданные[СтруктураМенеджера.менеджер][ИмяОбъекта];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СоставПолей = Новый Структура;
		СоставПолей.Вставить("Представление", "Analytics.Value");
		СоставПолей.Вставить("Ссылка", "Analytics.AnalyticsId");
		
		ТипАналитики = "";
		Если КЗМассивСсылок.Ключ = "CatalogRef.Валюты" Тогда
			ТипАналитики = "Валюты";
		ИначеЕсли КЗМассивСсылок.Ключ = "CatalogRef.Контрагенты" Тогда
			ТипАналитики = "Контрагенты";
		КонецЕсли;
		
		Если ИмяМенеджераXML = "EnumRef" Тогда
			
			ВыгрузитьОбъектыПеречисления(ПараметрыФала, КЗМассивСсылок.Значение);
			
			#Область ЗаписьМетаданныхПеречисления
						
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
			
			СтруктураОписания = Новый Структура;
			СтруктураОписания.Вставить("ТипМетаданных", КЗМассивСсылок.Ключ);
			СтруктураОписания.Вставить("ТипАналитики", 	ТипАналитики);
			СтруктураОписания.Вставить("ВидМетаданных", "Значения аналитики");
			СтруктураОписания.Вставить("Файлы", 		МассивФайлов);
			СтруктураОписания.Вставить("Синоним", 		МетаданныеОбъекта.Синоним);
			СтруктураОписания.Вставить("Метаданные", 	СоставПолей);
			
			МассивМетаданных.Добавить(СтруктураОписания);			                      
			
			#КонецОбласти
			
		Иначе 
			
			Если ИмяМенеджераXML = "CatalogRef" И МетаданныеОбъекта.Иерархический Тогда
				
				ДополнитьРодителей("Справочник." + ИмяОбъекта, КЗМассивСсылок.Значение);				
				СоставПолей.Вставить("Родитель", "Analytics.ParentAnalyticsId");
				
				Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов  Тогда
					СоставПолей.Вставить("ЭтоГруппа", "Analytics.isFolder");	
				КонецЕсли;
			КонецЕсли;	
			
			//ДополнитьСтрокуРеквизитов(СоставПолей, МетаданныеОбъекта, "СтандартныеРеквизиты");
			//ДополнитьСтрокуРеквизитов(СоставПолей, МетаданныеОбъекта, "Реквизиты");
			
			ТекстПолей = "";
			Для каждого поле Из СоставПолей Цикл
				ТекстПолей = ТекстПолей + поле.Ключ + "," + Символы.ПС;
			КонецЦикла;
			
			ТекстПолей = Лев(ТекстПолей, СтрДлина(ТекстПолей) - 2);
			//Соберем запрос к объектам
			ТекстЗапроса = "ВЫБРАТЬ "
			+ Символы.ПС
			+ ТекстПолей
			+ Символы.ПС
			+ " ИЗ "
			+ СтруктураМенеджера.Запрос + "." + ИмяОбъекта
			+ Символы.ПС
			+ "ГДЕ Ссылка В(&МассивСсылок) ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МассивСсылок", КЗМассивСсылок.Значение);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыгрузитьСсылочныеОбъекты(ПараметрыФала, РезультатЗапроса);				
			
			#Область ЗаписьМетаданных
			
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
			
			СтруктураОписания = Новый Структура;
			СтруктураОписания.Вставить("ТипМетаданных", КЗМассивСсылок.Ключ);
			СтруктураОписания.Вставить("ТипАналитики", 	ТипАналитики);
			СтруктураОписания.Вставить("ВидМетаданных", ВидМетаданных);
			СтруктураОписания.Вставить("Файлы", 		МассивФайлов);
			СтруктураОписания.Вставить("Синоним", 		МетаданныеОбъекта.Синоним);
			СтруктураОписания.Вставить("Метаданные", 	СоставПолей);
			
			МассивМетаданных.Добавить(СтруктураОписания);			                      
			
			#КонецОбласти
			
		КонецЕсли;			
		
	КонецЦикла;
	
КонецФункции


Функция ВыгрузитьФайлОписанийМетаданных(ПараметрыФала, МассивМетаданных)
	
	ИмяФайлаМетаданных 	= СформироватьПолноеИмяФайла(ПараметрыФала);	
	НастройкиСериализации = ПолучитьНастройкиСериализации();
	
	ЗаписьМетаданных = Новый ЗаписьJSON;
	ЗаписьМетаданных.ОткрытьФайл(ИмяФайлаМетаданных);
	
	ЗаписьМетаданных.ЗаписатьНачалоМассива();
	
	Для каждого элементМетаданного Из МассивМетаданных Цикл
		Если элементМетаданного.Свойство("МетаДанныеКонфигурации") Тогда
			элементМетаданного.Удалить("МетаДанныеКонфигурации");
		КонецЕсли;
		ЗаписатьJSON(ЗаписьМетаданных, элементМетаданного, НастройкиСериализации);
	КонецЦикла;
	
	ЗаписьМетаданных.ЗаписатьКонецМассива();
	ЗаписьМетаданных.Закрыть();
	
	//	//Операции
	//	МассивФайлов = Новый Массив;
	//	МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
	//	
	//	Данные = Новый Структура;
	//	Данные.Вставить("ТипМетаданных", "");
	//	Данные.Вставить("ВидМетаданных", "Операции");
	//	Данные.Вставить("Файлы", 		МассивФайлов);
	//	Данные.Вставить("Синоним", 		ОписаниеРегистра.Синоним);
	//	Данные.Вставить("Метаданные", 	ОписаниеРегистра.ПоляВыбора);
	//	                      
	//	ЗаписатьJSON(ЗаписьМетаданных, Данные, НастройкиСериализации);
	//	
	//	//Branch
	//	МассивФайлов = Новый Массив;
	//	МассивФайлов.Добавить("Branch." + ПараметрыФала.РасширениеФайла);
	//	
	//	МетаДанноеОрганизация = ПолучитьМетаданноеСправочникаОрганизации();
	//	
	//	Данные = Новый Структура;
	//	Данные.Вставить("ТипМетаданных", МетаДанноеОрганизация.Имя);
	//	Данные.Вставить("ВидМетаданных", "Branch");
	//	Данные.Вставить("Файлы", 		МассивФайлов);
	//	Данные.Вставить("Синоним", 		МетаДанноеОрганизация.Синоним);
	//	Данные.Вставить("Метаданные", 	"");
	//	                      
	//	ЗаписатьJSON(ЗаписьМетаданных, Данные, НастройкиСериализации);
	//	
	//	//Accounts
	//	МассивФайлов = Новый Массив;
	//	МассивФайлов.Добавить("Accounts." + ПараметрыФала.РасширениеФайла);
	//	
	//	МетаДанное_ПланСчетов = ОписаниеРегистра.МетаДанное.ПланСчетов;
	//	
	//	

КонецФункции


Процедура ВыгрузитьСсылочныеОбъекты(ПараметрыФала, РезультатЗапроса)
			
	//Запись данных
	НастройкиСериализации = ПолучитьНастройкиСериализации();
	
	ИмяФайла = СформироватьПолноеИмяФайла(ПараметрыФала);	
	
	Запись = Новый ЗаписьJSON;	
	Запись.ОткрытьФайл(ИмяФайла, , , ПолучитьПараметрыJSON());
	
	Запись.ЗаписатьНачалоМассива();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураЗаписи = Новый Структура;
	Для каждого Поле Из РезультатЗапроса.Колонки Цикл
		СтруктураЗаписи.Вставить(Поле.Имя);	
	КонецЦикла;
		
	Пока Выборка.Следующий() Цикл
					
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);		
		ЗаписатьJSON(Запись, СтруктураЗаписи, НастройкиСериализации, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива();
	
	Запись.Закрыть();	
		
КонецПроцедуры


Процедура ВыгрузитьОбъектыПеречисления(ПараметрыФала, Соответствие)
			
	//Запись данных
	НастройкиСериализации = ПолучитьНастройкиСериализации();
	
	ИмяФайла = СформироватьПолноеИмяФайла(ПараметрыФала);	
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Ссылка");
	СтруктураЗаписи.Вставить("Представление");
		
	Запись = Новый ЗаписьJSON;	
	Запись.ОткрытьФайл(ИмяФайла, , , ПолучитьПараметрыJSON());
	
	Запись.ЗаписатьНачалоМассива();
		
	Для каждого Поле Из Соответствие Цикл
		
		СтруктураЗаписи.Ссылка = Строка(Поле.Значение);
		СтруктураЗаписи.Представление = Строка(Поле.Ключ);
		
		ЗаписатьJSON(Запись, СтруктураЗаписи, НастройкиСериализации, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива();
	
	Запись.Закрыть();	
			
КонецПроцедуры


Процедура ВыгрузитьСправочникОрганизации(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных)
	
	МетаДанноеОрганизация = ПолучитьМетаданноеСправочникаОрганизации(СтруктураМетаданныхРегистраБухгалтерии);
	
	Если МетаДанноеОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФала.Вставить("ПрефиксИмени", "branch");
	
	СоставПолей = Новый Структура;
	СоставПолей.Вставить("Ссылка", "Branch.BranchId");
	СоставПолей.Вставить("Представление", "Branch.BranchName");
	
	Если МетаДанноеОрганизация.Иерархический Тогда
		СоставПолей.Вставить("Родитель", "Branch.ParentBranchId");		
	КонецЕсли;
	
	//ПотенциальныеПоля = "Родитель,Код,ЭтоГруппа";
	//
	//Для каждого Реквизит Из МетаДанноеОрганизация.СтандартныеРеквизиты Цикл
	//	
	//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
	//		СоставПолей.Вставить(Реквизит.Имя);
	//	КонецЕсли;				
	//	
	//КонецЦикла;
	//
	//Для каждого Реквизит Из МетаДанноеОрганизация.Реквизиты Цикл
	//	
	//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
	//		СоставПолей.Вставить(Реквизит.Имя);
	//	КонецЕсли;				
	//	
	//КонецЦикла;
	
	РезультатЗапроса = ПолучитьОбъектныеДанные("Справочник." + МетаДанноеОрганизация.Имя, СоставПолей);
	
	ВыгрузитьСсылочныеОбъекты(ПараметрыФала, РезультатЗапроса);
	
	#Область ЗаписьМетаданных
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("ТипМетаданных", МетаДанноеОрганизация.ПолноеИмя());
	СтруктураОписания.Вставить("ВидМетаданных", "branch");
	СтруктураОписания.Вставить("Файлы", 		МассивФайлов);
	СтруктураОписания.Вставить("Синоним", 		МетаДанноеОрганизация.Синоним);
	СтруктураОписания.Вставить("Метаданные", 	СоставПолей);
	
	МассивМетаданных.Добавить(СтруктураОписания);			                      
	
	#КонецОбласти
	
КонецПроцедуры


Процедура ВыгрузитьВидыАналитик(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных)
	
	МетаДанное = СтруктураМетаданныхРегистраБухгалтерии.МетаДанныеКонфигурации.ПланСчетов.ВидыСубконто;
	
	Если МетаДанное = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФала.Вставить("ПрефиксИмени", "AnalyticsType");
	
	
	СоставПолей = Новый Структура;
	СоставПолей.Вставить("Ссылка", "AnalyticsType.AnalyticsTypeId");
	СоставПолей.Вставить("Представление", "AnalyticsType.Name");
	СоставПолей.Вставить("ТипЗначения", "AnalyticsGroupType");
	
	//ПотенциальныеПоля = "Родитель,Код,ЭтоГруппа";
	
	//Для каждого Реквизит Из МетаДанное.СтандартныеРеквизиты Цикл
	//				
	//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
	//		СоставПолей.Вставить(Реквизит.Имя);
	//	КонецЕсли;				
	//	
	//КонецЦикла;
	//
	//Для каждого Реквизит Из МетаДанное.Реквизиты Цикл
	//				
	//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
	//		СоставПолей.Вставить(Реквизит.Имя);
	//	КонецЕсли;				
	//	
	//КонецЦикла;
	
	РезультатЗапроса = ПолучитьОбъектныеДанные("ПланВидовХарактеристик." + МетаДанное.Имя, СоставПолей);
	
	//Запись данных
	НастройкиСериализации = ПолучитьНастройкиСериализации();
	ИмяФайла = СформироватьПолноеИмяФайла(ПараметрыФала);	
	
	Запись = Новый ЗаписьJSON;	
	Запись.ОткрытьФайл(ИмяФайла, , , ПолучитьПараметрыJSON());	
	Запись.ЗаписатьНачалоМассива();
	
	Выборка = РезультатЗапроса.Выбрать();	
	СоставПолейДляОсновнойЗаписи = Новый ФиксированнаяСтруктура(СоставПолей);		
	СтруктураЗаписи = Новый Структура(СоставПолейДляОсновнойЗаписи);		
	
	Пока Выборка.Следующий() Цикл
		
		Массив = Новый Массив;
		Для каждого эл Из Выборка.ТипЗначения.Типы() Цикл
			Массив.Добавить(XMLТип(эл).ИмяТипа);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);				
		СтруктураЗаписи.ТипЗначения = Массив;
		
		ЗаписатьJSON(Запись, СтруктураЗаписи, НастройкиСериализации, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива();	
	Запись.Закрыть();	
	
	#Область ЗаписьМетаданных
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("ТипМетаданных", МетаДанное.ПолноеИмя());
	СтруктураОписания.Вставить("ВидМетаданных", "AnalyticsType");
	СтруктураОписания.Вставить("Файлы", 		МассивФайлов);
	СтруктураОписания.Вставить("Синоним", 		МетаДанное.Синоним);
	СтруктураОписания.Вставить("Метаданные", 	СоставПолей);
	
	МассивМетаданных.Добавить(СтруктураОписания);			                      
	
	#КонецОбласти
	
КонецПроцедуры


Функция ВыгрузитьПланСчетов(ПараметрыФала, СтруктураМетаданныхРегистраБухгалтерии, МассивМетаданных)
	
	МетаДанное = СтруктураМетаданныхРегистраБухгалтерии.МетаданныеКонфигурации.ПланСчетов;
	
	Если МетаДанное = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
#Область ПолучениеДанных

		СоставПолей = Новый Структура;
		СоставПолей.Вставить("Ссылка", 			"Account.AccountId");
		СоставПолей.Вставить("Представление", 	"Account.Name");
		СоставПолей.Вставить("Забалансовый", 	"Account.IsOffBalance");
		СоставПолей.Вставить("Родитель", 		"Account.ParentAccountId");
		СоставПолей.Вставить("Код", 			"Account.Code");
		СоставПолей.Вставить("Вид", 			"Account.Type");
		
		Если МетаДанное.ДлинаНаименования > 0 Тогда
			СоставПолей.Вставить("Наименование", "Account.NameRus");
		КонецЕсли;
		
		//Для каждого Реквизит Из МетаДанное.СтандартныеРеквизиты Цикл
		//				
		//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
		//		СоставПолей.Вставить(Реквизит.Имя);
		//	КонецЕсли;				
		//	
		//КонецЦикла;
		//
		//Для каждого Реквизит Из МетаДанное.Реквизиты Цикл
		//				
		//	Если СтрНайти(ПотенциальныеПоля, Реквизит.Имя) > 0  Тогда
		//		СоставПолей.Вставить(Реквизит.Имя);
		//	КонецЕсли;				
		//	
		//КонецЦикла;
		//
		СоставПолей.Вставить("ПризнакиУчета", 	Новый Структура);
		СоставПолей.Вставить("ВидыАналитик");

		СоставПолейДляОсновнойЗаписи = Новый ФиксированнаяСтруктура(СоставПолей);
		СоставПолей.Удалить("ПризнакиУчета");
		СоставПолей.Удалить("ВидыАналитик");
		
		ПризнакиУчета = Новый Структура;
		ПризнакиУчета.Вставить("Валютный", "Account.IsForeignCurrency");
		ПризнакиУчета.Вставить("Количественный", "Account.IsQuantative");
		
     
		Для каждого КЗ Из ПризнакиУчета Цикл			
			Если МетаДанное.ПризнакиУчета.Найти(КЗ.Ключ) <> Неопределено Тогда
				СоставПолейДляОсновнойЗаписи.ПризнакиУчета.Вставить(КЗ.Ключ);
				СоставПолей.Вставить(КЗ.Ключ, КЗ.Значение);				
			КонецЕсли;
		КонецЦикла;
		
		ВидыСубконто = Новый Структура;
		ВидыСубконто.Вставить("ВидСубконто");
		ВидыСубконто.Вставить("ТолькоОбороты");
		
		Для каждого Реквизит Из МетаДанное.ПризнакиУчетаСубконто Цикл
			ВидыСубконто.Вставить(Реквизит.Имя);
		КонецЦикла;
		
		ФиксированнаяСтруктураВидыСубконто = Новый ФиксированнаяСтруктура(ВидыСубконто);
		
		Текст = "ВЫБРАТЬ " + Символы.ПС;
		
		Для каждого поле Из СоставПолей Цикл
			Текст = Текст + "СсылкаНаОбъект." +	поле.Ключ + "," + Символы.ПС;
		КонецЦикла;
		
		Текст = Текст + "СсылкаНаОбъект.ВидыСубконто.*" + Символы.ПС;


		//Текст = Текст + " СсылкаНаОбъект.ВидыСубконто.(НомерСтроки КАК НомерСтроки) КАК НомерСтроки" + Символы.ПС;
		
		Текст = Текст + Символы.ПС + " ИЗ ПланСчетов." + МетаДанное.Имя+ " КАК СсылкаНаОбъект" + Символы.ПС;
		//Текст = Текст + "УПОРЯДОЧИТЬ ПО НомерСтроки";
		
		Запрос = Новый Запрос(Текст);	
		РезультатЗапроса = Запрос.Выполнить();
		
	#КонецОбласти		
		
	#Область ВыгрузкаФайла
	
	ПараметрыФала.Вставить("ПрефиксИмени", "Accounts");
		
		//Запись данных
		НастройкиСериализации = ПолучитьНастройкиСериализации();
		ИмяФайла = СформироватьПолноеИмяФайла(ПараметрыФала);	

		Запись = Новый ЗаписьJSON;	
		Запись.ОткрытьФайл(ИмяФайла, , , ПолучитьПараметрыJSON());
		
		Запись.ЗаписатьНачалоМассива();
		СтруктураЗаписи = Новый Структура(СоставПолейДляОсновнойЗаписи);		
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);		
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи.ПризнакиУчета, Выборка);
			
			ТаблицаАналитик = Выборка.ВидыСубконто.Выгрузить();
			Если ТаблицаАналитик.Количество() > 0 Тогда
				
				//ВыборкаАналитик = Выборка.ВидыСубконто.Выбрать();
				СтруктураЗаписи.ВидыАналитик = Новый Массив;
				//Пока ВыборкаАналитик.Следующий() Цикл
				ТаблицаАналитик.Сортировать("НомерСтроки");
				Для каждого Аналитика Из ТаблицаАналитик Цикл
					
					ВидыСубконто = Новый Структура(ФиксированнаяСтруктураВидыСубконто);
					ЗаполнитьЗначенияСвойств(ВидыСубконто, Аналитика);
					СтруктураЗаписи.ВидыАналитик.Добавить(ВидыСубконто);		
				//КонецЦикла;
				КонецЦикла;
			
			КонецЕсли;
			
			ЗаписатьJSON(Запись, СтруктураЗаписи, НастройкиСериализации, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
			
		КонецЦикла;
		
		Запись.ЗаписатьКонецМассива();
		
		Запись.Закрыть();	
		
	#КонецОбласти
	
	#Область ЗаписьМетаданных
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ПараметрыФала.ПрефиксИмени + "." + ПараметрыФала.РасширениеФайла);
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("ТипМетаданных", МетаДанное.ПолноеИмя());
	СтруктураОписания.Вставить("ВидМетаданных", "Account");
	СтруктураОписания.Вставить("Файлы", 		МассивФайлов);
	СтруктураОписания.Вставить("Синоним", 		МетаДанное.Синоним);
	СтруктураОписания.Вставить("Метаданные", 	СоставПолей);
	
	МассивМетаданных.Добавить(СтруктураОписания);			                      
	
	#КонецОбласти		
	
КонецФункции


Функция ВыгрузитьОперации(ПараметрыФала, ОписаниеРегистра, ПараметрыЗапроса = Неопределено, Файлы)
	
	#Область Получение_Операций	
		
		Текст = "ВЫБРАТЬ " + Символы.ПС;
			
		Для каждого поле Из ОписаниеРегистра.ПоляЗапроса Цикл
			
			Если поле.Ключ = "Регистратор" Тогда
				Текст = Текст + "ПРЕДСТАВЛЕНИЕ(Операция.Регистратор) КАК Регистратор," + Символы.ПС;				
				Продолжить;
			КонецЕсли;
			
			Текст = Текст + "Операция." + поле.Ключ + "," + Символы.ПС;
			
			//Если СтрНайти(Поле.Значение, "Dimention") > 0 ИЛИ СтрНайти(Поле.Значение, "Analytics") > 0 Тогда
			//	Текст = Текст + "ТИПЗНАЧЕНИЯ(Операция." + поле.Ключ + ") КАК ТИПЗНАЧЕНИЯ" + поле.Ключ + "," + Символы.ПС;			 				
			//КонецЕсли;
			
		КонецЦикла;
		
		Текст = Лев(Текст, СтрДлина(Текст) - 2);

		Текст = Текст + Символы.ПС
			+ "ИЗ РегистрБухгалтерии.#ИмяРегистра.ДвиженияССубконто КАК Операция
			|ГДЕ Операция.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|И Операция.Активность";

		Текст = СтрЗаменить(Текст, "#ИмяРегистра", ОписаниеРегистра.МетаданныеКонфигурации.Имя);
			 	                                       
		Запрос = Новый Запрос(Текст);	
		
		Для каждого параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(параметр.Ключ, параметр.Значение);
		КонецЦикла;
		
		РезультатЗапросаПоОперациям = Запрос.Выполнить();	
		ВыборкаОпераций = РезультатЗапросаПоОперациям.Выбрать();
		
	#КонецОбласти
	
	#Область Формирование_Структуры_Аналитик
	
	ПоляИсключения = "СчетДт, СчетКт";
	СтруктураАналитик 	= Новый Структура;
	СтруктураИзмерений	= Новый Структура;
	
	Для каждого Структура Из ОписаниеРегистра.Метаданные.Субконто Цикл
		
		Для каждого КЗ Из Структура Цикл
			Если КЗ.Значение = "OperationAnalytics.DebitAnalyticsId" 
				ИЛИ КЗ.Значение = "OperationAnalytics.CreditAnalyticsId" Тогда
				СтруктураАналитик.Вставить(КЗ.Ключ);			
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Для каждого Измерение Из ОписаниеРегистра.Метаданные.Измерения Цикл
		СтруктураИзмерений.Вставить(Измерение.Имя);	
	КонецЦикла;
	//Для каждого Колонка Из РезультатЗапросаПоОперациям.Колонки Цикл
	//	
	//	Если СтрНайти(ПоляИсключения, Колонка.Имя) > 0 ИЛИ СтрНайти(Колонка.Имя, "ВидСубконто") > 0 Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	МассивТипов = Колонка.ТипЗначения.Типы();
	//	
	//	Для каждого типКолонки Из МассивТипов Цикл
	//		Если СтрНайти(Строка(XMLТип(типКолонки).ИмяТипа), "Ref") > 0 Тогда
	//			СтруктураАналитик.Вставить(Колонка.Имя);
	//			Прервать;
	//		КонецЕсли;			
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	#КонецОбласти
	
	#Область Запись_Операций
	
	НастройкиСериализации = ПолучитьНастройкиСериализации();	
	КэшСсылокАналитик = Новый Соответствие;	
	КэшСсылокИзмерений = Новый Соответствие;
	
	СчетчикФайлов = 1;
	КоличествоСтрокВФайле = 10000;
	СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(ОписаниеРегистра.ПоляЗапроса));
	ТребуетсяЗаписьОпераций = НЕ РезультатЗапросаПоОперациям.Пустой();
	
	Пока ТребуетсяЗаписьОпераций Цикл
		
		ИмяФайла = ПараметрыФала.ПрефиксИмени + "_" + Формат(СчетчикФайлов, "ЧГ=0");
		ПолныйПутьКФайлу = СформироватьПолноеИмяФайла(ПараметрыФала, ИмяФайла);	
		
		Файлы.Добавить(ИмяФайла + "." + ПараметрыФала.РасширениеФайла);
		
		Запись = Новый ЗаписьJSON;	
		Запись.ОткрытьФайл(ПолныйПутьКФайлу, , , ПолучитьПараметрыJSON());
		
		Запись.ЗаписатьНачалоМассива();		
		
		СчетчикСтрок = 0;
		ТребуетсяЗаписьОпераций = Ложь;
	
		Пока ВыборкаОпераций.Следующий() Цикл

			Если СчетчикСтрок > КоличествоСтрокВФайле Тогда				
				ТребуетсяЗаписьОпераций = Истина;
				Прервать;
			КонецЕсли;
			
			СчетчикСтрок = СчетчикСтрок + 1;
			
			//Добавление аналитик
			ЗаполнитьЗначенияСвойств(СтруктураАналитик, ВыборкаОпераций);
			Для каждого ЗначениеАналитики Из СтруктураАналитик Цикл				
				ВключитьЗначениеВКэш(КэшСсылокАналитик, ЗначениеАналитики);			
			КонецЦикла;
			
			//Добавление измерений
			ЗаполнитьЗначенияСвойств(СтруктураИзмерений, ВыборкаОпераций);
			Для каждого ЗначениеИзмерения Из СтруктураИзмерений Цикл				
				ВключитьЗначениеВКэш(КэшСсылокИзмерений, ЗначениеИзмерения);			
			КонецЦикла;
			
			//Запись операций
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ВыборкаОпераций);
			ЗаписатьJSON(Запись, СтруктураЗаписи, НастройкиСериализации, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
			
		КонецЦикла;
		
		СчетчикФайлов = СчетчикФайлов + 1;
		
		Запись.ЗаписатьКонецМассива();
		Запись.Закрыть();	
		
	КонецЦикла;
		
	#КонецОбласти
	
КонецФункции


#КонецОбласти


#Область ПолучениеСтруктурыБазы


Функция ПолучитьМетаданноеСправочникаОрганизации(СтруктураМетаданныхРегистраБухгалтерии) 
	
	Метаданное = Неопределено;
	
	Для каждого КЗ Из СтруктураМетаданныхРегистраБухгалтерии.ПоляЗапроса Цикл
		Если КЗ.Значение = "Operation.BranchId" Тогда
			Метаданное = Метаданные.НайтиПоТипу(СтруктураМетаданныхРегистраБухгалтерии.МетаданныеКонфигурации.Измерения[КЗ.Ключ].Тип.Типы()[0]);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Метаданное;
	
КонецФункции


Функция ПолучитьСтруктуруРегистраБухгалтерии(МассивМетаданных)
	
	КритерийИмен = "Хозрасчетный";
	КритерийСинонимов = "бухгалтер";
	
	МетаданноеРегистра = Неопределено;	
	Результат = Неопределено;
	МетаданноеРегистра = Метаданные.РегистрыБухгалтерии.Найти(КритерийИмен);
	
	Если МетаданноеРегистра <> Неопределено Тогда
			
		КритерийИзмеренияВалюта 		= "Валюта";
		КритерийИзмеренияОрганизаций 	= "Организация";
		КритерийРесурсаСуммы 			= "Сумма";
		КритерийРесурсаВалютнаяСумма 	= "ВалютнаяСумма";
		КритерийРесурсаКоличество 		= "Количество";
		
		ПоляЗапроса = Новый Структура;
		
		ПоляЗапроса.Вставить("Период", "Operation.Date");
		ПоляЗапроса.Вставить("СчетКт", "Operation.CreditAccountId");
		ПоляЗапроса.Вставить("СчетДт", "Operation.DebitAccountId");
		ПоляЗапроса.Вставить("Регистратор", "Operation.Name");
		
		Для каждого Ресурс Из МетаданноеРегистра.Ресурсы Цикл
			
			Если Найти(КритерийРесурсаКоличество, Ресурс.Имя) > 0 Тогда
				ДобавитьПоляВыбора(ПоляЗапроса, Ресурс, "Operation.", "Quantity");								
			ИначеЕсли Найти(КритерийРесурсаВалютнаяСумма, Ресурс.Имя) > 0 И НЕ Ресурс.Балансовый Тогда
				ДобавитьПоляВыбора(ПоляЗапроса, Ресурс, "Operation.", "CurrencyAmount");
			ИначеЕсли Найти(КритерийРесурсаСуммы, Ресурс.Имя) > 0 И Ресурс.Балансовый Тогда
				ДобавитьПоляВыбора(ПоляЗапроса, Ресурс, "Operation.", "Amount");								
			Иначе
				//ДобавитьПоляВыбора(ПоляВыбора, Ресурс, "Resource");				
			КонецЕсли;				
			
		КонецЦикла;
		
		МетаданныеОпераций = Новый Структура(Новый ФиксированнаяСтруктура(ПоляЗапроса));
		МетаданныеОпераций.Вставить("Субконто", Новый Массив);
		
		Для каждого Реквизит Из МетаданноеРегистра.СтандартныеРеквизиты  Цикл
			
			
			Если Найти(Реквизит.Имя, "Субконто") > 0 И НЕ Найти(Реквизит.Имя, "ВидСубконто") > 0 Тогда
				
				НомерСубконто = СтрЗаменить(Реквизит.Имя, "Субконто", "");					
				ИмяСубконтоДт = "СубконтоДт" + НомерСубконто;
				ИмяСубконтоКт = "СубконтоКт" + НомерСубконто;
				
				ИмяВидаСубконтоДт = "ВидСубконтоДт" + НомерСубконто;
				ИмяВидаСубконтоКт = "ВидСубконтоКт" + НомерСубконто;
				
				ПоляЗапроса.Вставить(ИмяСубконтоДт, "OperationAnalytics.DebitAnalyticsId");
				ПоляЗапроса.Вставить(ИмяСубконтоКт, "OperationAnalytics.CreditAnalyticsId");
				
				Структура = Новый Структура;
				Структура.Вставить(ИмяСубконтоДт, "OperationAnalytics.DebitAnalyticsId");
				Структура.Вставить(ИмяВидаСубконтоДт, "OperationAnalytics.DebitAnalyticsTypeId");
				
				МетаданныеОпераций.Субконто.Добавить(Структура);
				
				Структура = Новый Структура;
				Структура.Вставить(ИмяСубконтоКт, "OperationAnalytics.CreditAnalyticsId");
				Структура.Вставить(ИмяВидаСубконтоКт, "OperationAnalytics.CreditAnalyticsTypeId");
				
				МетаданныеОпераций.Субконто.Добавить(Структура);
				
				ПоляЗапроса.Вставить(ИмяВидаСубконтоДт, "OperationAnalytics.DebitAnalyticsTypeId");
				ПоляЗапроса.Вставить(ИмяВидаСубконтоКт, "OperationAnalytics.CreditAnalyticsTypeId");
				
			КонецЕсли;				
			
		КонецЦикла;
		
		МетаданныеОпераций.Вставить("Измерения", Новый Массив);
		
		Для каждого Измерение Из МетаданноеРегистра.Измерения Цикл
			
			Если Найти(КритерийИзмеренияОрганизаций, Измерение.Имя) > 0  И Измерение.Балансовый Тогда
				ДобавитьПоляВыбора(ПоляЗапроса, Измерение, "Operation.", "BranchId");
				ДобавитьПоляВыбора(МетаданныеОпераций, Измерение, "Operation.", "BranchId");
				//ДобавитьОписаниеИзмерения(МетаданныеОпераций.Измерения, Измерение, "Operation.", "BranchId");
			ИначеЕсли Найти(КритерийИзмеренияВалюта, Измерение.Имя) > 0  И НЕ Измерение.Балансовый Тогда
				ДобавитьПоляВыбора(ПоляЗапроса, Измерение, "OperationAnalytics.", "AnalyticsId");
				ДобавитьОписаниеИзмерения(МетаданныеОпераций.Измерения, Измерение, "OperationAnalytics.", "AnalyticsId");
			Иначе
				ДобавитьПоляВыбора(ПоляЗапроса, Измерение, "Operation.", "Dimention"); 
				ДобавитьОписаниеИзмерения(МетаданныеОпераций.Измерения, Измерение, "OperationAnalytics.", "AnalyticsId");
			КонецЕсли;				
			
		КонецЦикла;
				
		//Для каждого Реквизит Из регистр.Реквизиты Цикл			
		//	ПоляВыбора.Вставить(Реквизит.Имя, "Prop"); 				
		//КонецЦикла;
		
#Область ЗаписьМетаданных

		СтруктураОписания = Новый Структура;
					
		СтруктураОписания.Вставить("ТипМетаданных", МетаданноеРегистра.ПолноеИмя());
		СтруктураОписания.Вставить("ВидМетаданных", "Операции");
		СтруктураОписания.Вставить("Файлы", 		Новый Массив);
		СтруктураОписания.Вставить("Синоним", 		МетаданноеРегистра.Синоним);
		СтруктураОписания.Вставить("Метаданные", 	МетаданныеОпераций);
		
		МассивМетаданных.Добавить(СтруктураОписания);			                      
		
		Результат = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураОписания));
		Результат.Вставить("ПоляЗапроса", 	ПоляЗапроса);
		Результат.Вставить("МетаданныеКонфигурации", МетаданноеРегистра);
		
		
#КонецОбласти
				
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеФункции

Процедура ВключитьЗначениеВКэш(КэшСсылок, ЗначениеАналитики)
		
	Если ЗначениеЗаполнено(ЗначениеАналитики.Значение) Тогда
		ИмяТипа = XMLТипЗнч(ЗначениеАналитики.Значение).ИмяТипа;
		Если Найти(ИмяТипа, "EnumRef") > 0 Тогда					
			Соответствие = КэшСсылок[ИмяТипа];
			Если Соответствие = Неопределено Тогда
				Соответствие = Новый Соответствие;
				ИмяМетаданногоПеречисления = ЗначениеАналитики.Значение.Метаданные().Имя;
				Для каждого элПеречисления Из Перечисления[ИмяМетаданногоПеречисления] Цикл								
					Соответствие.Вставить(элПеречисления, Строка(Новый УникальныйИдентификатор));
				КонецЦикла;
				КэшСсылок[ИмяТипа] = Соответствие;
			КонецЕсли;
		Иначе
			Массив = КэшСсылок[ИмяТипа];
			Если Массив = Неопределено Тогда
				Массив = Новый Массив;
				КэшСсылок[ИмяТипа] = Массив;
			КонецЕсли;
			Массив.Добавить(ЗначениеАналитики.Значение);						
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСоответствиеТиповКМетаданным()
	
	соот = Новый Соответствие;
	
	соот.Вставить("CatalogRef", 				Новый Структура("менеджер, Запрос", "Справочники", "Справочник"));
	соот.Вставить("DocumentRef", 				Новый Структура("менеджер, Запрос", "Документы", "Документ"));
	соот.Вставить("EnumRef", 					Новый Структура("менеджер, Запрос", "Перечисления", "Перечисление"));
	соот.Вставить("ChartOfCharacteristicTypesRef", Новый Структура("менеджер, Запрос", "ПланыВидовХарактеристик", "ПланВидовХарактеристик"));
	соот.Вставить("ChartOfAccountsRef", 		Новый Структура("менеджер, Запрос", "ПланыСчетов", "ПланСчетов"));
	соот.Вставить("ChartOfCalculationTypesRef", Новый Структура("менеджер, Запрос", "ПланыВидовРасчета", "ПланВидовРасчета"));
	
	Возврат соот;
	
КонецФункции


Процедура ДобавитьПоляВыбора(Структура, Поле, ПрефиксИмени = "", ПостфиксИмени = "")
		
	Если Поле.Балансовый Тогда
		Структура.Вставить(Поле.Имя, ПрефиксИмени+ПостфиксИмени);
	Иначе
		Структура.Вставить(Поле.Имя + "Дт", ПрефиксИмени + "Debit" 	+ ПостфиксИмени);
		Структура.Вставить(Поле.Имя + "Кт", ПрефиксИмени + "Credit" + ПостфиксИмени);
	КонецЕсли;
	
КонецПроцедуры


Процедура ДобавитьОписаниеИзмерения(Массив, Поле, Префикс, Постфикс)
	
	МассивТипов = Поле.Тип.Типы();
	
	Если МассивТипов.Количество() > 0 Тогда
		
		Если Поле.Балансовый Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("Имя", Поле.Имя);
			Структура.Вставить("Назначение", Префикс + Постфикс);
			Структура.Вставить("Тип", XMLТип(МассивТипов[0]).ИмяТипа);	
			Массив.Добавить(Структура);
			
		Иначе
			
			Структура = Новый Структура;
			Структура.Вставить("Имя", Поле.Имя + "Дт");
			Структура.Вставить("Назначение", Префикс + "Debit" + Постфикс);
			Структура.Вставить("Тип", XMLТип(МассивТипов[0]).ИмяТипа);	
			Массив.Добавить(Структура);
			
			Структура = Новый Структура;
			Структура.Вставить("Имя", Поле.Имя + "Кт");
			Структура.Вставить("Назначение", Префикс + "Credit" + Постфикс);
			Структура.Вставить("Тип", XMLТип(МассивТипов[0]).ИмяТипа);	
			Массив.Добавить(Структура);
			
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры


Функция ПолучитьПараметрыJSON()
		
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб, Истина);
	Возврат ПараметрыJSON;

КонецФункции


Функция ПолучитьНастройкиСериализации()
		
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Возврат НастройкиСериализации;

КонецФункции


Функция СформироватьПолноеИмяФайла(ПараметрыФала, ПрефиксИмени = "")
	
	мПрефиксИмени = ?(ПустаяСтрока(ПрефиксИмени), ПараметрыФала.ПрефиксИмени, ПрефиксИмени);
	Имя = ПараметрыФала.Каталог + мПрефиксИмени + "." + ПараметрыФала.РасширениеФайла;
	
	Возврат Имя;

КонецФункции


Функция ПолучитьОбъектныеДанные(ИмяМенеджера, СоставПолей)
		
	//Получение данных
	Текст = "ВЫБРАТЬ " + Символы.ПС;
	
	Для каждого поле Из СоставПолей Цикл
		Текст = Текст + "СсылкаНаОбъект." +	поле.Ключ + "," + Символы.ПС;
	КонецЦикла;
	
	Текст = Лев(Текст, СтрДлина(Текст) - 2);
	
	Текст = Текст + Символы.ПС + " ИЗ " + ИмяМенеджера + " КАК СсылкаНаОбъект" + Символы.ПС;
	
	Запрос = Новый Запрос(Текст);	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;
	
КонецФункции


Процедура ДополнитьСтрокуРеквизитов(МассивРеквизитов, МетаданныеОбъекта, Коллекция)
	
	СтрокаИсключения 	= "ИмяПредопределенныхДанных, Предопределенный";
	СтрокаСостава		= "Ссылка, Родитель, Владелец, Код, Номер, Дата, Проведен, ТипЗначения, Вид";
	
	Для каждого Реквизит Из МетаданныеОбъекта[Коллекция] Цикл
 		Если Найти(СтрокаИсключения, Реквизит.Имя) = 0 И Найти(СтрокаСостава, Реквизит.Имя) > 0 Тогда
			МассивРеквизитов = МассивРеквизитов + Реквизит.Имя + "," + Символы.ПС;			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


Функция ДополнитьРодителей(ИмяМенеджера, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объект.Родитель КАК Р1,
		|	Объект.Родитель.Родитель КАК Р2,
		|	Объект.Родитель.Родитель.Родитель КАК Р3,
		|	Объект.Родитель.Родитель.Родитель.Родитель КАК Р4
		|ИЗ
		|	#ИмяМенеджера КАК Объект
		|ГДЕ
		|	Объект.Ссылка В(&Массив)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяМенеджера", ИмяМенеджера);
	Запрос.УстановитьПараметр("Массив", МассивОбъектов);
	
	//МассивРодителей = Новый Массив;
	ТребуетсяПовторныйЗапрос = Истина;
		
	Пока ТребуетсяПовторныйЗапрос Цикл
		
		РезультатЗапроса = Запрос.Выполнить();
		МассивОбъектовДляПовторногоЗапроса = Новый Массив;
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТребуетсяПовторныйЗапрос = 
				ЗначениеЗаполнено(Выборка.Р1) И
				ЗначениеЗаполнено(Выборка.Р2) И
				ЗначениеЗаполнено(Выборка.Р3) И
				ЗначениеЗаполнено(Выборка.Р4);
			Родитель = Неопределено;
			
			Если ЗначениеЗаполнено(Выборка.Р1) Тогда
				МассивОбъектов.Добавить(Выборка.Р1);				
				Родитель = Выборка.Р1; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Р2) Тогда
				МассивОбъектов.Добавить(Выборка.Р2);				
				Родитель = Выборка.Р2; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Р3) Тогда
				МассивОбъектов.Добавить(Выборка.Р3);				
				Родитель = Выборка.Р3; 				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Р4) Тогда
				МассивОбъектов.Добавить(Выборка.Р4);				
				Родитель = Выборка.Р4; 				
			КонецЕсли;
			
			МассивОбъектовДляПовторногоЗапроса.Добавить(Родитель);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Массив", МассивОбъектовДляПовторногоЗапроса);
		
	КонецЦикла;
	
	//Возврат МассивРодителей;

КонецФункции

#КонецОбласти

Функция ПолучитьПараметрыФала()
		
	ПараметрыФала = Новый Структура(); 
	
	ПараметрыФала.Вставить("РасширениеФайла", 	"json");
	ПараметрыФала.Вставить("Каталог",			Каталог);
	Файл = Новый Файл(ПараметрыФала.Каталог);
	
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не корректный путь к каталогу";
	КонецЕсли;
		
	Если Прав(ПараметрыФала.Каталог, 1) <> "\" Тогда
		ПараметрыФала.Каталог = ПараметрыФала.Каталог + "\";		
	КонецЕсли;
	
	Возврат ПараметрыФала;

КонецФункции
